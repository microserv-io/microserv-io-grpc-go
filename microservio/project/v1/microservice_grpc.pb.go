// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: microservio/project/v1/microservice.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroserviceServiceClient is the client API for MicroserviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroserviceServiceClient interface {
	ListMicroservices(ctx context.Context, in *ListMicroservicesRequest, opts ...grpc.CallOption) (MicroserviceService_ListMicroservicesClient, error)
	GetMicroserviceByID(ctx context.Context, in *GetMicroserviceByIDRequest, opts ...grpc.CallOption) (*GetMicroserviceByIDResponse, error)
	CreateMicroservice(ctx context.Context, in *CreateMicroserviceRequest, opts ...grpc.CallOption) (*CreateMicroserviceResponse, error)
	UpdateMicroservice(ctx context.Context, in *UpdateMicroserviceRequest, opts ...grpc.CallOption) (*UpdateMicroserviceResponse, error)
}

type microserviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroserviceServiceClient(cc grpc.ClientConnInterface) MicroserviceServiceClient {
	return &microserviceServiceClient{cc}
}

func (c *microserviceServiceClient) ListMicroservices(ctx context.Context, in *ListMicroservicesRequest, opts ...grpc.CallOption) (MicroserviceService_ListMicroservicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MicroserviceService_ServiceDesc.Streams[0], "/microservio.project.v1.MicroserviceService/ListMicroservices", opts...)
	if err != nil {
		return nil, err
	}
	x := &microserviceServiceListMicroservicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MicroserviceService_ListMicroservicesClient interface {
	Recv() (*ListMicroservicesResponse, error)
	grpc.ClientStream
}

type microserviceServiceListMicroservicesClient struct {
	grpc.ClientStream
}

func (x *microserviceServiceListMicroservicesClient) Recv() (*ListMicroservicesResponse, error) {
	m := new(ListMicroservicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *microserviceServiceClient) GetMicroserviceByID(ctx context.Context, in *GetMicroserviceByIDRequest, opts ...grpc.CallOption) (*GetMicroserviceByIDResponse, error) {
	out := new(GetMicroserviceByIDResponse)
	err := c.cc.Invoke(ctx, "/microservio.project.v1.MicroserviceService/GetMicroserviceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceServiceClient) CreateMicroservice(ctx context.Context, in *CreateMicroserviceRequest, opts ...grpc.CallOption) (*CreateMicroserviceResponse, error) {
	out := new(CreateMicroserviceResponse)
	err := c.cc.Invoke(ctx, "/microservio.project.v1.MicroserviceService/CreateMicroservice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceServiceClient) UpdateMicroservice(ctx context.Context, in *UpdateMicroserviceRequest, opts ...grpc.CallOption) (*UpdateMicroserviceResponse, error) {
	out := new(UpdateMicroserviceResponse)
	err := c.cc.Invoke(ctx, "/microservio.project.v1.MicroserviceService/UpdateMicroservice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroserviceServiceServer is the server API for MicroserviceService service.
// All implementations must embed UnimplementedMicroserviceServiceServer
// for forward compatibility
type MicroserviceServiceServer interface {
	ListMicroservices(*ListMicroservicesRequest, MicroserviceService_ListMicroservicesServer) error
	GetMicroserviceByID(context.Context, *GetMicroserviceByIDRequest) (*GetMicroserviceByIDResponse, error)
	CreateMicroservice(context.Context, *CreateMicroserviceRequest) (*CreateMicroserviceResponse, error)
	UpdateMicroservice(context.Context, *UpdateMicroserviceRequest) (*UpdateMicroserviceResponse, error)
	mustEmbedUnimplementedMicroserviceServiceServer()
}

// UnimplementedMicroserviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMicroserviceServiceServer struct {
}

func (UnimplementedMicroserviceServiceServer) ListMicroservices(*ListMicroservicesRequest, MicroserviceService_ListMicroservicesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMicroservices not implemented")
}
func (UnimplementedMicroserviceServiceServer) GetMicroserviceByID(context.Context, *GetMicroserviceByIDRequest) (*GetMicroserviceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMicroserviceByID not implemented")
}
func (UnimplementedMicroserviceServiceServer) CreateMicroservice(context.Context, *CreateMicroserviceRequest) (*CreateMicroserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMicroservice not implemented")
}
func (UnimplementedMicroserviceServiceServer) UpdateMicroservice(context.Context, *UpdateMicroserviceRequest) (*UpdateMicroserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMicroservice not implemented")
}
func (UnimplementedMicroserviceServiceServer) mustEmbedUnimplementedMicroserviceServiceServer() {}

// UnsafeMicroserviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroserviceServiceServer will
// result in compilation errors.
type UnsafeMicroserviceServiceServer interface {
	mustEmbedUnimplementedMicroserviceServiceServer()
}

func RegisterMicroserviceServiceServer(s grpc.ServiceRegistrar, srv MicroserviceServiceServer) {
	s.RegisterService(&MicroserviceService_ServiceDesc, srv)
}

func _MicroserviceService_ListMicroservices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMicroservicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MicroserviceServiceServer).ListMicroservices(m, &microserviceServiceListMicroservicesServer{stream})
}

type MicroserviceService_ListMicroservicesServer interface {
	Send(*ListMicroservicesResponse) error
	grpc.ServerStream
}

type microserviceServiceListMicroservicesServer struct {
	grpc.ServerStream
}

func (x *microserviceServiceListMicroservicesServer) Send(m *ListMicroservicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MicroserviceService_GetMicroserviceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMicroserviceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServiceServer).GetMicroserviceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservio.project.v1.MicroserviceService/GetMicroserviceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServiceServer).GetMicroserviceByID(ctx, req.(*GetMicroserviceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceService_CreateMicroservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMicroserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServiceServer).CreateMicroservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservio.project.v1.MicroserviceService/CreateMicroservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServiceServer).CreateMicroservice(ctx, req.(*CreateMicroserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceService_UpdateMicroservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMicroserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServiceServer).UpdateMicroservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microservio.project.v1.MicroserviceService/UpdateMicroservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServiceServer).UpdateMicroservice(ctx, req.(*UpdateMicroserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroserviceService_ServiceDesc is the grpc.ServiceDesc for MicroserviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroserviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "microservio.project.v1.MicroserviceService",
	HandlerType: (*MicroserviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMicroserviceByID",
			Handler:    _MicroserviceService_GetMicroserviceByID_Handler,
		},
		{
			MethodName: "CreateMicroservice",
			Handler:    _MicroserviceService_CreateMicroservice_Handler,
		},
		{
			MethodName: "UpdateMicroservice",
			Handler:    _MicroserviceService_UpdateMicroservice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMicroservices",
			Handler:       _MicroserviceService_ListMicroservices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "microservio/project/v1/microservice.proto",
}
